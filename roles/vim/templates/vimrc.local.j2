#jinja2: lstrip_blocks: "True"
"===============================================================================
" This file is generated by Ansible, all changes will be lost
"===============================================================================
"=================================== FILES =====================================
" This must be first line, because it changes other options as a side effect
set nocompatible                    "stay IMproved (required for vundle to work):
set hidden                          " do not buffer file and do not store swap file of edited files

" Ignore files:
set wildignore=*.swp,*.bak,*.pyc,*.class
set directory=~/.vim/swp//,/tmp//   " directories for .swp files
"===============================================================================
"================================ COLORSCHEME ==================================
set t_Co=256 " REQUIRED for Tmux
set background=dark
set t_ut=                           " disable Background Color Erase

if &t_Co >= 256 || has("gui_running")
    colorscheme {{ vim_colorscheme }}
{% if not 'mustang' in vim_colorscheme %}
    "colorscheme mustang
{% endif %}
{% if not 'solarized' in vim_colorscheme %}
    "colorscheme solarized
{% endif %}
{% if not 'nord' in vim_colorscheme %}
    "colorscheme nord
{% endif %}
{% if not 'cipherpunk' in vim_colorscheme %}
    "colorscheme cipherpunk
{% endif %}
endif

if &t_Co > 2 || has("gui_running") && !exists("syntax_on")
    syntax on   " switch syntax highlighting on, when the terminal has colors
endif

""" SOLARIZED
" Schedule automatic LIGHT/DARK background switching:
"let hour = strftime("%H")
"if 6 <= hour && hour < 18
"  set background=dark
"else
"  set background=light
"endif
"===============================================================================
"============================== TAB COMPLETION =================================
"http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion

""" USE OMNI COMPLETION (I DONT LIKE IT)
filetype plugin on
set omnifunc=syntaxcomplete#Complete

set wildmode=list:longest,list:full

function! InsertTabWrapper()
    " Ensure the correct Tab direction for omni-completion:
    if pumvisible()
        return "\<C-N>"
    endif

    let col = col('.') - 1
    " insert tab at beginning of line:
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    " if not at the beginning use omni-completions if supported:
    elseif exists('&omnifunc') && &omnifunc != ''
        return "\<c-x>\<c-o>"
    "otherwise use completion:
    else
        " <c-n> instead of <c-p> in order to inverse tab direction (immitate shift-tab behavior)
        return "\<c-n>"
    endif
endfunction

" Make sure Tab is switching between autocompletion options:
" inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" Avoid flicker by using an expr mapping (may not work with 'UltiSnip'):
inoremap <expr> <silent> <Tab> InsertTabWrapper()

" Here we use <c-p> to inverse Shift+Tab behavior:
inoremap <S-Tab> <c-p>
"===============================================================================
"=============================== KEY MAPPINGS ==================================
let mapleader= ","                  " Change the mapleader (default is \)
                                    "now we can do something like ':nnoremap ,d dd'
" Non-recursive key-mapping for vim Normal Mode (Make ; key to be the same as : key:)
nnoremap ; :

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"Set paste" disables 'autoindent' and 'showmatch' so use pastetoggle F2 shortcut instead:
nnoremap <F2> :set paste!<CR>:echo "Paste mode: " . (&paste ? "ON" : "OFF")<CR>

" handle misstypings
command! W :w                       " For mistyping :w as :W
command! Q :q                       " For mistyping :q as :Q
command! WQ :wq                     " For mistyping :wq as :WQ

" Window Navigation with Ctrl-[hjkl]
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l

" Toggle Numbers Column with ',-1':
nnoremap <Leader>1 :set number!<CR>

" Toggle Sign Column (on the left behind numbers Signify/Gitgutter) with ',-2':
nnoremap <Leader>2 :call ToggleSignColumn()<CR>
" Toggle signcolumn. Works on vim>=8.1 or NeoVim
function! ToggleSignColumn()
    if !exists("b:signcolumn_on") || b:signcolumn_on
        set signcolumn=no
        let b:signcolumn_on=0
    else
        set signcolumn=yes
        let b:signcolumn_on=1
    endif
endfunction

" Toggle Wrap mode with ',-z' (similar to VSCode's Alt-z)
nmap <silent> <leader>z :set wrap!<CR>

" Display all buffers info with ',+b'
{% if vim_plugins|map(attribute='name')|flatten|intersect(['junegunn/fzf','junegunn/fzf.vim'])|length == 0%}
nnoremap <Leader>b :buffers<CR>:buffer<Space>
{% else %}
" Commented out: Using FZF instead, see ~/.vim/vim.local/vimrc.fzf
" nnoremap <Leader>b :buffers<CR>:buffer<Space>
{% endif %}
"===============================================================================
{% if not vim_neovim %}
{# This is a default behavior in NeoVIM #}
"============================ BACKSPACE BEHAVIOUR ==============================
set backspace=indent,eol,start      " Allow backspacing over everything in insert mode - NOT NEEDED IN NEOVIM
set backspace=2                     " Backspace deletes like most editors
"===============================================================================
{% endif %}
"========================= DELETE TRAILING WHITESPACES==========================
fun! StripTrailingWhitespace()
    " Only strip if the b:noStripeWhitespace variable isn't set
    if exists('b:noStripWhitespace')
        return
    endif
    %s/\s\+$//e
endfun

" Delete all Trailing White Spaces in all types of documents:
autocmd BufWritePre * call StripTrailingWhitespace()

" DO NOT delete Trailing White Spaces for some filetypes (e.g.: ruby, javascript, perl):
" autocmd FileType ruby,javascript,perl let b:noStripWhitespace=1
"===============================================================================
"================================ BREAK LINES ==================================
let &showbreak = '↳ '               " Symbol shown on the left when long line is broken into multiple lines
set wrap                            " Show long lines as multiple lines (for gpg, ssh keys etc.)
set cpoptions+=n                    " Shift '↳ ' break symbol to the left, to the number column.
" produces 'r' instead of new line when pressing Enter if vim-endwise plugin is enabled
"===============================================================================
"============================= DEFAULT CODE STYLE ==============================
set tabstop=4                       " A tab is four spaces
set softtabstop=4                   " Delete tabs as one keystroke
set shiftwidth=4                    " Number of spaces to use for autoindenting

set shiftround                      " Use multiple of shiftwidth when indenting with '<<' and '>>'
set smarttab                        " Insert tabs on the start of a line according to shiftwidth, not tabstop
set nosmartindent                   " Adds indents to lines between { }. Removes indents when first symbol is '#'
set autoindent                      " Always set autoindenting on
set copyindent                      " Copy the previous indentation on autoindenting
set expandtab                       " Convert tabs to spaces
set formatoptions-=cro              " DISABLE autocomment (enabled only for specific files at '.vim/after/tftplugin/')
"===============================================================================
"=============================== LIST CHARACTERS ===============================
" Set look of tabs, trailing spaces, end of line characters etc.
set list listchars=tab:▸·,trail:·,precedes:←,extends:→  ",nbsp:‡,eol:§
"===============================================================================
"=================================== SEARCH ====================================
set hlsearch                        " Highlight search terms
set incsearch                       " Show search matches as you type
set ignorecase                      " Ignore case when searching
set smartcase                       " Ignore case if search pattern is all lowercase, case-sensitive otherwise
"===============================================================================
"=============================== UNDO & HISTORY ================================
""" UNDO
set undofile
set undodir=~/.vim/undodir          " Undo directory
set undolevels=1000                 " Maximum number of changes that can be undoed
set undoreload=10000                " Maximum number lines to save for undo on a buffer reload

""" HISTORY
set history=1000                    " Remember more commands and search history
set viminfo='1000,f1,:1000,/1000
"===============================================================================
"================================== CURSOR =====================================
set cursorline                      " Highlight current line
set cursorcolumn                    " Highlight current column
set ruler                           " Show the cursor position all the time (NOT NEEDED?)

" Underline the current row instead of highlight:
"highlight clear CursorLine
"highlight CursorLine gui=underline cterm=underline
"===============================================================================
"============================ LINES & PERIFIRALS LOOK ==========================
set textwidth=0                     " To ensure lines are shorter then 120 chars set to 120
set colorcolumn=+1                  " Show where 120 characters limit is (vertical line on the right)

" Mark the lines above 120 columns
highlight OverLength ctermbg=red ctermfg=white gui=undercurl guisp=red
match OverLength /\%121v.\+/

" Mark the columns that are close to overlength limit
highlight LineProximity gui=undercurl guisp=orange
let w:m1=matchadd('LineProximity', '\%<121v.\%>115v', -1)

set number                          " Always show line numbers
set showmatch                       " Set show matching parenthesis (NOT NEEDED?)
"===============================================================================
"================================== RENDERING ==================================
set nolazyredraw                    " Don't redraw screen while executing macros
set synmaxcol=125                   " Stop rendering syntax colors in long lines (improves rendering performance)
{% if not vim_neovim %}
set ttyscroll=3                     " Improves redraw performance when scroll (DOES NOT WORK IN NEOVIM)
{% endif %}
"===============================================================================
"=================================== BELLS =====================================
set noerrorbells                    " Don't beep (on errors)
set visualbell                      " Enable vim's internal visual bell
set t_vb=                           " Set the effect of the visual bell to do nothing
"===============================================================================
"=============================== MISCELLANEOUS =================================
set clipboard=unnamedplus           " Use system's clipboard when yanking
set title                           " Change the terminal's title to VIM/NVIM
set fileformat=unix                 " Endline set to \n
set encoding=utf-8                  " Set Encoding to UTF-8
set modifiable                      " Make a buffer modifiable: needed for setting fileformat to unix | mac | dos
set cf                              " Enable error files & error jumping
set autowrite                       " Automatically :w before running commands
set shm=atIWswxrnmlf                " Message formats
set mouse=a                         " Enable mouse (this disables the terminal select mode - use Option key on Mac)
set noshowmode                      " Disable Mode in last line lower the status like '-- INSERT --' etc.
set noshowcmd                       " Show the command we're typing
set laststatus=2                    " Always display status line and ONLY the last window
"===============================================================================
"================================= POWERLINE ===================================
"source /usr/local/lib/python2.7/site-packages/powerline/bindings/vim/plugin/powerline.vim

" OR use Python to initialize Powerline:
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
""python del powerline_setup  " NOT Sure if this needed (left here as info)

"let g:Powerline_symbols = 'fancy'
"===============================================================================
