# This file is managed by Ansible, all changes will be lost

{% if ohmyzsh_setup_tmux|default(false) %}
# Automatically start tmux when starting new shell
{% if 'tmux' in (ohmyzsh_default_plugins|default([])|map(attribute='name')|list + item.plugins|default([])|list) %}
ZSH_TMUX_AUTOSTART=false  # true - will start tmux automatically ATTACHED TO CURRENT SESSION!
{% endif %}
# Avoid "double tmux" in ssh sessions -
# Only start tmux if not already in tmux and on an interactive shell:
if [ -z "$TMUX" ] && [ -z "$SSH_TTY" ] && [ -n "$PS1" ]; then
    tmux
fi
{% endif %}

# Path to your oh-my-zsh configuration.
ZSH="{{ ohmyzsh_install_dir }}"

# Disable odd message regading completions on mac when doing 'sudo su'
ZSH_DISABLE_COMPFIX=true

{% if 'Darwin' in ansible_os_family %}
# Specify custom ohmyzsh cache, because on mac /usr/ dir is read-only:
ZSH_CACHE_DIR="{{ ohmyzsh_cache_dir }}"
{% endif %}

# Colorize output
export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad

# For Solarized
export TERM="xterm-256color"

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="random"

ZSH_THEME="{{
  item.theme
  if item.theme is defined and (
    ('powerlevel9k/powerlevel9k' in item.theme and
     (ohmyzsh_themes | selectattr('name', 'equalto', 'powerlevel9k') | map(attribute='install') | list | first | default(false)))
    or
    ('powerlevel10k/powerlevel10k' in item.theme and
     (ohmyzsh_themes | selectattr('name', 'equalto', 'powerlevel10k') | map(attribute='install') | list | first | default(false)))
  )
  else ohmyzsh_default_theme
}}"

{% if (ohmyzsh_themes | selectattr('name', 'equalto', 'powerlevel9k')
  | map(attribute='install') | list | first | default(false)) %}
{% if item.theme is defined and item.theme == 'powerlevel9k/powerlevel9k' %}
source "{{ ohmyzsh_powerlevel9k_cfg }}"

{% endif %}
{% endif %}
{% if (ohmyzsh_themes | selectattr('name', 'equalto', 'powerlevel10k')
  | map(attribute='install') | list | first | default(false)) %}
{% if item.theme is defined and item.theme == 'powerlevel10k/powerlevel10k' %}
# Source the existing p10k config (if it exists)
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

{% endif %}
{% endif %}
# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
#DISABLE_AUTO_UPDATE="true"

# Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

{% if item is defined and (item.ssh_ids|default([])|length>0) %}
# SSH ids
zstyle :omz:plugins:ssh-agent agent-forwarding on
zstyle :omz:plugins:ssh-agent identities {{ item.ssh_ids|join(' ') }}

{% endif %}

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format:count plugins=(rails git textmate ruby lighthouse)
{% if ohmyzsh_default_plugins is defined or (item is defined and item.plugins is defined) %}
default_plugins=(
{% for plugin in (ohmyzsh_default_plugins | default([]) + item.plugins | default([])) %}
    {{ plugin.name }}
{% endfor %}
)

{% endif %}
{% if ohmyzsh_custom_plugins is defined %}
custom_plugins=(
{% for plugin in ohmyzsh_custom_plugins if plugin.install | default(true) %}
    {{ plugin.name }}
{% endfor %}
)

{% endif %}
if [[ -f "${HOME}/.zsh/plugins" ]]; then
    . "${HOME}/.zshrc/plugins"
    plugins=( ${default_plugins[@]} ${custom_plugins[@]} )
elif [[ -d "${ZSH}/custom/plugins" ]]; then
    plugins=( ${default_plugins[@]} ${custom_plugins[@]} )
else
    plugins=${default_plugins}
fi

{% set all_custom_plugins = ohmyzsh_custom_plugins | selectattr("install", "equalto", true) | list %}
{% set all_custom_plugin_names = all_custom_plugins | map(attribute='name') | list %}

{% if 'zsh-syntax-highlighting' in all_custom_plugin_names %}
# Make zsh look like fish:
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=white'
{% endif %}

if (( ! ${fpath[(I)/usr/local/share/zsh/site-functions]} )); then
  FPATH=/usr/local/share/zsh/site-functions:${FPATH}
fi

source "${ZSH}/oh-my-zsh.sh"
{% set all_plugins = (ohmyzsh_default_plugins | default([]) + item.plugins | default([])) %}
{% if 'kubectl' in all_plugins | map(attribute='name') | list %}
source <(kubectl completion zsh)
{% endif %}

# Customize to your needs...
{% if 'Darwin' in ansible_os_family %}
export PATH="{{ ohmyzsh_brew_prefix.stdout }}/bin:${PATH}"                         # Binaries installed with Homebrew
export PATH="$(brew --prefix)/sbin:${PATH}"                     # Sys Binaries installed with Homebrew
export PATH="$(brew --prefix)/opt/libpq/bin:${PATH}"            # libpq binaries
export PATH="$(brew --prefix openvpn)/sbin:${PATH}"             # Brew installed openvpn bins
{% endif %}
export PATH="${PATH}:${HOME}/.krew/bin"                         # Krew: installed binaries
export PATH="${PATH}:${HOME}/.rbenv/bin:${HOME}/.rbenv/shims"   # Rbenv: managing ruby versions
export PATH="${PATH}:${HOME}/.cargo/bin"                        # Cargo: installed crates
export PATH="${PATH}:${HOME}/.local/bin:${HOME}/bin"            # User-wide installed binaries
export GPG_TTY=$(tty)
export EDITOR=vim visudo
export SHELL="{{ (ohmyzsh_binaries.results|items2dict(key_name='item', value_name='stdout')).zsh }}"
export LC_TYPE="en_US.UTF-8"
export LANG="en_US.UTF-8"
export DISPLAY=:0   # for X11 Forwarding (XQuartz utility on mac) to work with iTerm2

# Load aliases
if [ -f "${HOME}/.zsh/aliases" ]; then
    source "${HOME}/.zsh/aliases"
fi

# Load custom configs
if [ -d "${HOME}/.zsh/conf.d" ]; then
    for i in "${HOME}/.zsh/conf.d/*.sh"; do
        if [ -r "${i}" ]; then
            . "${i}"
        fi
    done
fi

# Load Rails environment variables if present
if [ -f "${HOME}/.rails.env" ]; then
    source "${HOME}/.rails.env"
fi

# Source fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

{% set all_plugins = (ohmyzsh_default_plugins | default([]) + item.plugins | default([])) | map(attribute='name') | list %}
{% if 'terraform' in all_plugins %}
# Added with `terraform -install-autocomplete` command.
# If terraform autocompletions do not work, remove these lines and reissue the command
{% set binaries_rc = ohmyzsh_binaries.results | items2dict(key_name='item', value_name='rc') %}
{% set binaries_stdout = ohmyzsh_binaries.results | items2dict(key_name='item', value_name='stdout') %}
{% if binaries_rc.terraform | int > 0 %}
#autoload -U +X bashcompinit && bashcompinit
#complete -o nospace -C {{ binaries_stdout.terraform }} terraform
{% else %}
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C {{ binaries_stdout.terraform }} terraform
{% endif %}
{% endif %}

# Timezone variable passed to ssh sessions for systems in UTC
# See ~/.ssh/conf.d for 'SendEnv TZ'
# and 'AcceptEnv TZ' in SSHD (on UTC systems):
export TZ="{{ control_host_tz }}"
